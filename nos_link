#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
require 'yaml'

KNOWN_LOADERS = ['naive', 'none']

$config = Trollop::options do
  banner <<-EOS
USAGE: nos_link -o output_binary assembly_module [space separated list of additional modules]
EOS
  opt :output_binary, "Name of the raw format output binary.", :type => :string, :default => "out.dcpu16"
  opt :listing, "Print a listing of what's going to be assembled and quit.", :type => :boolean
  opt :tree_listing, "Print the parsed 'tree' of instructions.", :type => :boolean
  opt :pre_bin, "Print an assembly listing of the final program just before fixing.", :type => :boolean
  opt :bin_listing, "Print a listing with binary operation values.", :type => :boolean
  opt :loader, "Choose which loader stub to use. Choose from: #{KNOWN_LOADERS.join(',')}", :type => :string, :default => KNOWN_LOADERS[0]
  opt :input_files, "A path to a list of modules to link. One entry per line", :type => :string
  opt :hacking, "Are you hacking on nos_link? You want exceptions, don't you?", :type => :boolean
  opt :base_address, "Assemble to a different base address.", :type => :integer, :default => 0
  opt :unref_symbols, "Print a list of unreferenced symbols and stop.", :type => :boolean
end

Trollop::die :output_binary, "must be specified" unless $config[:output_binary]


#============LINKER=============
require File.expand_path('../linker/parser.rb', __FILE__)
require File.expand_path('../linker/assembler.rb', __FILE__)
#require File.expand_path(File.dirname(__FILE__) + '/linker/parser.rb')
#require File.expand_path(File.dirname(__FILE__) + '/linker/assembler.rb')

instruction_stream = []
symbol_table = {}

input_files = []
input_files.concat(ARGV)

if $config[:input_files]
  open($config[:input_files], 'r') do |file|
    input_files.concat(file.readlines)
  end
end

if input_files.size == 0
  puts "No input files."
  exit 1
end

input_files.unshift(File.expand_path("../loaders/#{$config[:loader]}.s", __FILE__))

asm_mods = []

input_files.each do |filename|
  open(filename, 'r') do |file|
    this_module = ObjectModule.new(filename, file.readlines)
    this_module.program_symbols = symbol_table #will now define into global space
    
    this_module.parse
    instruction_stream.concat(this_module.instructions)
    asm_mods << this_module.get_abs_module
  end
end

if $config[:listing]
  puts instruction_stream.join("\n")
  exit
end

if $config[:tree_listing]
  asm_mods.each do |mod|
    puts YAML::dump(mod.parse_tree)
  end
  exit
end

assembler = Assemblinker.new(symbol_table, asm_mods)

assembler.assemble

if $config[:pre_bin]
  puts assembler.instr_list.join("\n")
  exit
end

assembler.fix

if $config[:unref_symbols]
  puts "Unreferenced symbols: #{assembler.get_unref_symbols.join(", ")}"
  exit
end

assembler.realize

unless $config[:bin_listing]
  open($config[:output_binary], 'w') do |outfile|
    assembler.binary(outfile)
  end
else
  assembler.print_hex_and_instr
end

