#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'

$config = Trollop::options do
  banner <<-EOS
USAGE: nos_link -o output_binary assembly_module [space separated list of additional modules]
EOS
  opt :output_binary, "Name of the output x10b-format binary.", :type => :string, :default => "out.x10b"
  opt :listing, "Print a listing of what's going to be assembled and quit.", :type => :boolean
  opt :pre_bin, "Print a pseudo-listing. This is essentially a text representation of the binary image.", :type => :boolean
  opt :bin_listing, "Print a listing with binary operation values.", :type => :boolean
#  opt :input_files, "A list of files to assemble. Used after files on the command-line.", :type => :string
end

Trollop::die :output_binary, "must be specified" unless $config[:output_binary]


#============LINKER=============
require File.expand_path(File.dirname(__FILE__) + '/linker/parser.rb')
require File.expand_path(File.dirname(__FILE__) + '/linker/assembler.rb')

instruction_stream = []
symbol_table = {}

input_files = []
input_files.concat(ARGV)

if $config[:input_files]
  open($config[:input_files], 'r') do |file|
    listed_ins = file.readlines
  end
end

input_files.each do |filename|
  open(filename, 'r') do |file|
    this_module = ObjectModule.new(filename, file.readlines)
    this_module.program_symbols = symbol_table #will now define into global space
    
    this_module.parse
    instruction_stream.concat(this_module.instructions)
  end
end

if $config[:listing]
  puts instruction_stream.join("\n")
  exit
end

assembler = Assemblinker.new(symbol_table, instruction_stream)

assembler.fix
assembler.assemble

if $config[:pre_bin]
  puts instruction_stream.join("\n")
  exit
end

assembler.realize

unless $config[:bin_listing]
  open($config[:output_binary], 'w') do |outfile|
    assembler.binary(outfile)
  end
else
  assembler.print_hex_and_instr
end

