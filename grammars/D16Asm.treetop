grammar D16Asm
	rule parameters
		indirect_or_direct additional_param* ([ \t]*)? (';' .*)? {
			def content
				retval = []
				retval << elements[0].content
				if elements[1] && !elements[1].empty?
					retval.concat(elements[1].elements.map {|e| e.content})
				end
				retval
			end
		}
	end
	
	# Parameters may be direct or indirect
	rule indirect_or_direct
		('[' [ \t]*)? expression ([ \t]*)? (']')? {
			def content
				retval = elements[1].content
				retval[:indirect] = !elements[0].empty?
				retval
			end
		}
	end
	
	# Multiple parameters per line
	rule additional_param
		comma indirect_or_direct {
			def content
				elements[1].content
			end
		}
	end
	
	rule comma
		',' [ \t]*
	end

	# an expression is just a term, or a term followed by an addition or subtraction
	rule expression
		term (additive / subtractive)? {
			def content
				retval = {:term => elements[0].content}
				if elements.length > 1 && elements[1].respond_to?('content')
					sub_expr = elements[1].content 
					retval[:rhs] = sub_expr[:expr]
					retval[:rhs][:term][:operator] = sub_expr[:operator]
				end
				retval
			end
		}
	end
	
	# add two expressions
	rule additive
		plus expression {
			def content
				{:operator => '+',
				 :expr => elements[1].content}
			end
		}
	end
	
	# subtract two expressions
	rule subtractive
		minus expression {
			def content
				{:operator => '-',
				 :expr => elements[1].content}
			end
		}
	end
	
	rule plus
		'+' [ \t]*
	end
	
	rule minus
		'-' [ \t]*
	end
	
	# any legal term.
	rule term
		( register
		/ special_value
		/ literal 
		/ reference ) [ \t]* {
			def content
				elements[0].content
			end
		}
	end
	
	rule decimal
		[0-9]+ {
			def value
				text_value.to_i(10)
			end
		}
	end
	
	rule hex
		'0x' [0-9a-fA-F]+ {
			def value
				text_value[2..-1].to_i(16)
			end
		}
	end
	
	# A literal is a number.
	rule literal
		'-'? (hex / decimal) {
			def content
				sign = 1
				if text_value.start_with? '-'
					sign = -1
				end
				{:type => :literal, :token => text_value, :value => elements[1].value * sign}
			end
		}
	end
	
	# A reference is any text-like token that isn't something else.
	rule reference
		[a-zA-Z\._$]+ [a-zA-Z\._0-9]* {
			def content
				{:type => :reference, :token => text_value}
			end
		}
	end
	
	# A register is a register.
	rule register
		[abcxyzijABCXYZIJ] !([a-zA-Z0-9\._$]) {
			def content
				{:type => :register, :token => text_value.downcase}
			end
		}
	end
	
	# Special values are sp, pc, ex, push, pop
	rule special_value
		('sp' / 'SP' / 'pc' / 'PC' / 'ex' / 'EX' / 'push' / 'PUSH' / 'pop' / 'POP') !([a-zA-Z0-9\._$]) {
			def content
				{:type => :special, :token => text_value.downcase}
			end
		}
	end
end